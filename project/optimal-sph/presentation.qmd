---
title: "Optimal SPH Pressure fields"
author: "Julian Karrer"
lightbox: true
format:
  revealjs: 
    theme: dark
    transition: fade
    background-transition: fade
    chalkboard: true
    center: true
  html:
    include-in-header:
      - pyscript-header.html
fontsize: 24pt
---

<style>
  /* :root{--r-link-color:white !important;} */
  .aside-footnotes{opacity:0.5; font-size:14pt;}  
</style>

# Motivation {background-video="res/coast-cut.mp4" background-video-loop="true" background-video-muted="true" auto-animate=true}

## Smoothed Particle Hydrodynamics {auto-animate=true}


<!-- $\begin{align}A(\vec{x}_i) &= \int_\Omega &A(\vec{x}_j) \delta(\vec{x}_j - \vec{x})  \,dV\\A_i &\approx \sum_{j \in \mathcal{N}_i} \frac{m_j}{\rho_j} &A_j  W(\vec{x}_i - \vec{x}_j, \hbar)\end{align}$ -->

<!-- - $A(\vec{x}_i) = \int_\Omega A(\vec{x}_j) \delta(\vec{x}_j - \vec{x})  dV$ -->
$\begin{align}
A_i &\approx \sum_{j \in \mathcal{N}_i} \frac{m_j}{\rho_j} \, A_j \, W_{ij}\qquad\qquad
\nabla A_i \approx \rho_i \sum_{j \in \mathcal{N}_i} m_j \, \left( \frac{A_i}{\rho_i^2} + \frac{A_j}{\rho_j^2} \right) \, \nabla W_{ij}
\end{align}$ 


<!-- $\begin{align}A(\vec{x}_i) &\approx \sum_{j \in \mathcal{N}_i} V_j A_j W(\vec{x}_{ij}, \hbar)\\\nabla A(\vec{x}_i) &\approx \sum_{j \in \mathcal{N}_i} V_j A_j \nabla W(\vec{x}_{ij}, \hbar)\end{align}$

- Sum over neighbours $\mathcal{N}_i := \left\{\vec{x} : \, \left|\left|\vec{x}_i-\vec{x}\right|\right|_2 \leq \hbar\,  \right\}$ -->
- Gaussian Kernel $W_{ij} := W(\vec{x}_i - \vec{x}_j, \hbar)$ with smoothing length $\hbar$^[SPH Tutorial, Koshier et al. 2019]

<div style="display: flex; justify-content: center; align-items: center; flex-direction: column;">
  <canvas id="smooth_canv" width="800" height="200"
          style="border:1px solid #444;"></canvas>
  <br/>
  <div style="display: flex;"> $\hbar$ <span style="width:20px"></span><input type="range" id="smoothing_length" min="5" max="300" value="10"></div>
</div>

```{=html}
<script>
  const canvas = document.getElementById('smooth_canv');
  const ctx = canvas.getContext('2d');
  const slider = document.getElementById('smoothing_length');

  const particle_img = new Image();
  particle_img.src = './res/sph-alpha-low.png';

  particles = []
  particle_img.onload = () => {
    particles.push([0.5,0.5])
    draw_particles();
  };
  slider.addEventListener('input', () => {
    draw_particles();
  }); 
  canvas.addEventListener('click', evt => {
    // get click pos relative to canvas
    const rect = canvas.getBoundingClientRect();
    const x = (evt.clientX - rect.left) / rect.width;
    const y = (evt.clientY - rect.top ) / rect.height;
    particles.push([x,y]);
    draw_particles()
  });
  document.addEventListener("keydown", (event) => {
    if (event.key.toLowerCase() === ",") {
      particles=[];
      draw_particles()
    }
  });


  function draw_particles() {
    const w = canvas.width, h = canvas.height;
    const size = +slider.value;
    ctx.clearRect(0, 0, w, h);
    for (let i=0; i<particles.length; i+=1){
      const px = particles[i][0] * w;
      const py = particles[i][1] * h;
      ctx.drawImage(
        particle_img,
        px - size/2,   // top-left x
        py - size/2,   // top-left y
        size,          // draw width
        size           // draw height
      );
    }
  }
  
</script>
```

## What we need to solve {auto-animate=true}
- Newtons Equations of Motion (split and discretized)^[SPH Tutorial, Koshier et al. 2019]

$\begin{align}\vec{v}^*_i(t)&=\vec{v}_i(t) +\Delta t \cdot \left(\vec{g} + \vec{a}^{vis}_i(t)\right)\\\vec{v}_i(t+\Delta t)&=\vec{v}^*_i(t) +\Delta t \cdot \vec{a}^p_i(t)\\ \vec{x}_i(t+\Delta t)&=\vec{x}_i(t) +\Delta t \cdot \vec{v}_i(t+\Delta t)\end{align}$

<!-- - External accelerations (explicit)

$\vec{a}^{ext}_i = \vec{g} + \vec{a}^{vis}_i(t)$ -->

- Pressures are a constraint force^[PMPG: Alhussein & Daqaq 2024]

Find $p_i$ such that $\vec{a}^{p}_i = -\frac{1}{\rho_i}\nabla p_i$ leads to $\rho_i(t+\Delta t) = \rho_0$

## Particle Deficiency {auto-animate=true}

Find $p_i$ such that $\vec{a}^{p}_i = -\frac{1}{\rho_i}\nabla p_i$ leads to $\rho_i(t+\Delta t) = \rho_0$

![](res/particle-deficiency-light.png){height=400}

- Positivity constraint $p_i \geq 0$

- Incompressibility constraint $\rho_i(t+\Delta t) \leq \rho_0$

## Linearizing the constraint {auto-animate=true}
- Incompressibility constraint $\rho_i(t+\Delta t) \leq \rho_0$

$\rho_i(t+\Delta t) \approx \rho_i(t) + \frac{D\rho_i}{D t} \Delta t$

::: {.fragment}
$\rho_i^*(t) \quad\quad\,\,= \rho_i(t) - \rho_i(t) \nabla \cdot(\vec{v}^*_i + \Delta t \vec{a}^p_i) \Delta t$
:::

::: {.fragment}

- Linearized Incompressibility Constraint $\rho_i^*(t) - \rho_0 \leq \epsilon$
:::

## Formulating an Optimization Problem {auto-animate=true}

- Linearized Incompressibility Constraint $\rho_i^*(t) - \rho_0 \leq \epsilon$
- Positivity constraint $p_i \geq 0$
- $\Longrightarrow$ Explosions are feasible


## Formulating an Optimization Problem {auto-animate=true}
- Idea: Minimize Action

$\begin{align}S(\vec{p}) &= \frac{1}{2}\sum_i \left|\left|\, \vec{a}^p_i \,\right|\right|_2^2\\ &\propto \sum_i \langle\nabla p_i\rangle \cdot \langle\nabla p_i\rangle \\S_i (\vec{p})&:= \left(\rho_i \sum_{j \in \mathcal{N}_i} m_j \, \left( \frac{p_i}{\rho_i^2} + \frac{p_j}{\rho_j^2} \right) \, \nabla W_{ij}\right)^2\end{align}$ 

  - Gauss' principle: minimize Action subject to constraints.^[PMPG: Alhussein & Daqaq 2024]

## Formulating an Optimization Problem {auto-animate=true}

<div style="margin: 50px;
  border: white 1px solid;
  display: flex;
  justify-content: center;
  align-items: center;
  border-radius: 10px;">

$\begin{align}
&\min_{\vec{p}\in ‚Ñù^N} &\frac{1}{2}\sum_i S_i(\vec{p}) &\\
&\text{s.t.}&\forall i\in\{1,\dots,N\}: &\quad p_i \geq 0 \\
&&\forall i\in\{1,\dots,N\}: &\quad \langle\rho^*_i\rangle - \rho_0 \leq \epsilon \\
\end{align}$
</div>

- This is a convex Quadratic Program with a Least Squares objective
  - $S_i(\vec{p})$ is quadratic in $\vec{p}$ with positive semidefinite Hessian
  - $p_i$ is linear in $\vec{p}$
  - $\langle\rho^*_i\rangle - \rho_0$ is affine in $\vec{p}$

## Results {auto-animate=true}
- The fluid solver was implemented in Python using CasADi

<!-- - $\begin{align}\nabla p_i \approx \rho_i \sum_{j \in \mathcal{N}_i} m_j \, \left( \frac{p_i}{\rho_i^2} + \frac{p_j}{\rho_j^2} \right) \, \nabla W_{ij}\end{align}$^[SPH Tutorial, Koshier et al. 2019] -->